# Use the official gcc image, based on debian.
# It can use version tags as well, like gcc:8.5.
# See https://hub.docker.com/_/gcc/ for more info.
image: gcc:14

variables:
  GIT_SUBMODULE_STRATEGY: recursive

build_gcc:
  stage: build
  before_script:
    - apt-get update
    - apt-get -y install catch cmake g++ libxml2 libxml2-dev zlib1g-dev
    # Remove parts of the submodule that are not used but would get into CI's
    # way when linting.
    - rm -rf ./libstriezel/archive ./libstriezel/common/graphics ./libstriezel/common/gui ./libstriezel/tests
  script:
    # Syntax check of C++ files. The defaults.hpp file is generated by CMake
    # during the build and does not exist yet, so we temporarily copy the
    # incomplete template file to its place - and remove it after the syntax
    # check is done.
    - cp ./code/templates/defaults.prototype.hpp ./code/templates/defaults.hpp
    - ./ci/cpplint.sh
    - unlink ./code/templates/default.hpp
    # build and run tests
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V

build_clang:
  image: debian:12-slim
  stage: build
  before_script:
    - apt-get update
    - apt-get -y install catch cmake clang libxml2 libxml2-dev pkg-config zlib1g-dev
    # Remove parts of the submodule that are not used but would get into CI's
    # way when linting.
    - rm -rf ./libstriezel/archive ./libstriezel/common/graphics ./libstriezel/common/gui ./libstriezel/tests
    - export CC=clang && export CXX=clang++
  script:
    # Syntax check of C++ files. The defaults.hpp file is generated by CMake
    # during the build and does not exist yet, so we temporarily copy the
    # incomplete template file to its place - and remove it after the syntax
    # check is done.
    - cp ./code/templates/defaults.prototype.hpp ./code/templates/defaults.hpp
    - ./ci/cpplint.sh
    - unlink ./code/templates/default.hpp
    # build and run tests
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V
